


ARM Macro Assembler    Page 1 


    1 00000000         ;/**
    2 00000000         ; * ****************************************************
                       **************************************************
    3 00000000         ; *                                             DeviceNe
                       t Device
    4 00000000         ; *                                               RF pro
                       ject
    5 00000000         ; *                                               Main F
                       ile
    6 00000000         ; *                                               
    7 00000000         ; *                              (c) Copyright 2001-2011
                       , Li.Guibin, BeiJing, ZH
    8 00000000         ; *                                            All Right
                        Reserved
    9 00000000         ; * 
   10 00000000         ; * File    : os_cpu_a.asm
   11 00000000         ; * By      : Li.Guibin
   12 00000000         ; * Version : v0.5
   13 00000000         ; * ****************************************************
                       **************************************************
   14 00000000         ; */
   15 00000000         
   16 00000000         ;*******************************************************
                       *************************************************
   17 00000000         ;                                           PUBLIC FUNCT
                       IONS
   18 00000000         ;*******************************************************
                       *************************************************
   19 00000000         
   20 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   21 00000000                 IMPORT           OSPrioCur
   22 00000000                 IMPORT           OSPrioHighRdy
   23 00000000                 IMPORT           OSTCBCur
   24 00000000                 IMPORT           OSTCBHighRdy
   25 00000000                 IMPORT           OSIntExit
   26 00000000                 IMPORT           OSTaskSwHook
   27 00000000         
   28 00000000                 IMPORT           OsEnterSum
   29 00000000         
   30 00000000         
   31 00000000                 EXPORT           OS_ENTER_CRITICAL ; Functions d
                                                            eclared in this fil
                                                            e
   32 00000000                 EXPORT           OS_EXIT_CRITICAL
   33 00000000                 EXPORT           OSStartHighRdy
   34 00000000                 EXPORT           OSCtxSw
   35 00000000                 EXPORT           OSIntCtxSw
   36 00000000                 EXPORT           OS_CPU_PendSVHandler
   37 00000000         
   38 00000000                 EXPORT           CPU_IntDis
   39 00000000                 EXPORT           CPU_IntEn
   40 00000000         
   41 00000000         ;*******************************************************
                       *************************************************
   42 00000000         ;                                                EQUATES
                       
   43 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 2 


   44 00000000         
   45 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   46 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   47 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   48 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   49 00000000         
   50 00000000 00000000 
                       OS_CRITICAL_INT_PRIO
                               EQU              (0 << 5)    ;  Critical setions
                                                             manage prio. 
   51 00000000         
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000         
   57 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   58 00000000                 THUMB
   59 00000000                 REQUIRE8
   60 00000000                 PRESERVE8
   61 00000000         
   62 00000000         
   63 00000000         ;*******************************************************
                       *************************************************
   64 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   65 00000000         ;
   66 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   67 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   68 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   69 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   70 00000000         ;              into the CPU's status register.
   71 00000000         ;
   72 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   73 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   74 00000000         ;
   75 00000000         ;



ARM Macro Assembler    Page 3 


   76 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   77 00000000         ;
   78 00000000         ;                 void Task (void *p_arg)
   79 00000000         ;                 {
   80 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   81 00000000         ;                     OS_CPU_SR  cpu_sr;
   82 00000000         ;                 #endif
   83 00000000         ;
   84 00000000         ;                          :
   85 00000000         ;                          :
   86 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   87 00000000         ;                          :
   88 00000000         ;                          :
   89 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   90 00000000         ;                          :
   91 00000000         ;                          :
   92 00000000         ;                 }
   93 00000000         ;*******************************************************
                       *************************************************
   94 00000000         
   95 00000000         OS_ENTER_CRITICAL
   96 00000000                 IF               OS_CRITICAL_INT_PRIO > 0
  104 00000000 B672            CPSID            I           ;  Disable all the 
                                                            interrupts
  105 00000002         ;  禁能所有中断
  106 00000002 B406            PUSH             {R1,R2}
  107 00000004                 ENDIF
  108 00000004 4929            LDR              R1, =OsEnterSum ;  OsEnterSum++
                                                            
  109 00000006 780A            LDRB             R2, [R1]
  110 00000008 F102 0201       ADD              R2, R2, #1
  111 0000000C 700A            STRB             R2, [R1]
  112 0000000E BC06            POP              {R1,R2}
  113 00000010 4770            BX               LR
  114 00000012         
  115 00000012         OS_EXIT_CRITICAL
  116 00000012 B406            PUSH             {R1, R2}
  117 00000014 4925            LDR              R1, =OsEnterSum ;  OsEnterSum--
                                                            
  118 00000016 780A            LDRB             R2, [R1]
  119 00000018 F1A2 0201       SUB              R2, R2, #1
  120 0000001C 700A            STRB             R2, [R1]
  121 0000001E F04F 0100       MOV              R1,  #0
  122 00000022 2A00            CMP              R2,  #0     ;  if OsEnterSum=0,
                                                            enable 
  123 00000024         ;  interrupts如果OsEnterSum=0，
  124 00000024                 IF               OS_CRITICAL_INT_PRIO > 0 
                                                            ;  开中断;
  127 00000024 F381 8810       MSREQ            PRIMASK, R1
  128 00000028                 ENDIF
  129 00000028 BC06            POP              {R1, R2}
  130 0000002A 4770            BX               LR
  131 0000002C         
  132 0000002C         ;*******************************************************
                       **************************************************



ARM Macro Assembler    Page 4 


  133 0000002C         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
  134 0000002C         ;
  135 0000002C         ; Description : Disable/Enable interrupts.
  136 0000002C         ;
  137 0000002C         ; Prototypes  : void  CPU_IntDis(void);
  138 0000002C         ;               void  CPU_IntEn (void);
  139 0000002C         ;*******************************************************
                       **************************************************
  140 0000002C         
  141 0000002C         CPU_IntDis
  142 0000002C B672            CPSID            I
  143 0000002E 4770            BX               LR
  144 00000030         
  145 00000030         
  146 00000030         CPU_IntEn
  147 00000030 B662            CPSIE            I
  148 00000032 4770            BX               LR
  149 00000034         
  150 00000034         ;*******************************************************
                       *************************************************
  151 00000034         ;                                          START MULTITA
                       SKING
  152 00000034         ;                                       void OSStartHigh
                       Rdy(void)
  153 00000034         ;
  154 00000034         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  155 00000034         ;              the first task to start.
  156 00000034         ;
  157 00000034         ;           2) OSStartHighRdy() MUST:
  158 00000034         ;              a) Setup PendSV exception priority to low
                       est;
  159 00000034         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  160 00000034         ;              c) Set OSRunning to TRUE;
  161 00000034         ;              d) Trigger PendSV exception;
  162 00000034         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  163 00000034         ;*******************************************************
                       *************************************************
  164 00000034         
  165 00000034         OSStartHighRdy
  166 00000034 481E            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  167 00000036 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  168 0000003A 7001            STRB             R1, [R0]
  169 0000003C         
  170 0000003C 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  171 0000003E F380 8809       MSR              PSP, R0
  172 00000042         
  173 00000042 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  174 00000044 2101            MOVS             R1, #1
  175 00000046 7001            STRB             R1, [R0]
  176 00000048         



ARM Macro Assembler    Page 5 


  177 00000048 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  178 0000004A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  179 0000004E 6001            STR              R1, [R0]
  180 00000050         
  181 00000050 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  182 00000052         
  183 00000052         OSStartHang
  184 00000052 E7FE            B                OSStartHang ; Should never get 
                                                            here
  185 00000054         
  186 00000054         
  187 00000054         ;*******************************************************
                       *************************************************
  188 00000054         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  189 00000054         ;                                           void OSCtxSw
                       (void)
  190 00000054         ;
  191 00000054         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  192 00000054         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  193 00000054         ;*******************************************************
                       *************************************************
  194 00000054         
  195 00000054         OSCtxSw
  196 00000054 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  197 00000056 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  198 0000005A 6001            STR              R1, [R0]
  199 0000005C 4770            BX               LR
  200 0000005E         
  201 0000005E         ;*******************************************************
                       *************************************************
  202 0000005E         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  203 0000005E         ;                                         void OSIntCtxS
                       w(void)
  204 0000005E         ;
  205 0000005E         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  206 0000005E         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  207 0000005E         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  208 0000005E         ;*******************************************************
                       *************************************************
  209 0000005E         
  210 0000005E         OSIntCtxSw
  211 0000005E 4816            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi



ARM Macro Assembler    Page 6 


                                                            tch)
  212 00000060 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  213 00000064 6001            STR              R1, [R0]
  214 00000066 4770            BX               LR
  215 00000068         
  216 00000068         ;*******************************************************
                       *************************************************
  217 00000068         ;                                         HANDLE PendSV 
                       EXCEPTION
  218 00000068         ;                                     void OS_CPU_PendSV
                       Handler(void)
  219 00000068         ;
  220 00000068         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  221 00000068         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  222 00000068         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  223 00000068         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  224 00000068         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  225 00000068         ;              a thread or occurs due to an interrupt or
                        exception.
  226 00000068         ;
  227 00000068         ;           2) Pseudo-code is:
  228 00000068         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  229 00000068         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  230 00000068         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  231 00000068         ;              d) Call OSTaskSwHook();
  232 00000068         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  233 00000068         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  234 00000068         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  235 00000068         ;              h) Restore R4-R11 from new process stack;
                       
  236 00000068         ;              i) Perform exception return which will re
                       store remaining context.
  237 00000068         ;
  238 00000068         ;           3) On entry into PendSV handler:
  239 00000068         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  240 00000068         ;                 xPSR, PC, LR, R12, R0-R3
  241 00000068         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  242 00000068         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  243 00000068         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  244 00000068         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  245 00000068         ;
  246 00000068         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we



ARM Macro Assembler    Page 7 


  247 00000068         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  248 00000068         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  249 00000068         ;*******************************************************
                       *************************************************
  250 00000068         
  251 00000068         OS_CPU_PendSVHandler
  252 00000068 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  253 0000006A F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  254 0000006E B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  255 00000070         
  256 00000070 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  257 00000072 E880 0FF0       STM              R0, {R4-R11}
  258 00000076         
  259 00000076 4911            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  260 00000078 6809            LDR              R1, [R1]
  261 0000007A 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  262 0000007C         
  263 0000007C         ; At this point, entire context of process has been save
                       d
  264 0000007C         OS_CPU_PendSVHandler_nosave
  265 0000007C B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  266 0000007E 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  267 00000080 4780            BLX              R0
  268 00000082 F85D EB04       POP              {R14}
  269 00000086         
  270 00000086 480F            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  271 00000088 490F            LDR              R1, =OSPrioHighRdy
  272 0000008A 780A            LDRB             R2, [R1]
  273 0000008C 7002            STRB             R2, [R0]
  274 0000008E         
  275 0000008E 480B            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  276 00000090 490E            LDR              R1, =OSTCBHighRdy
  277 00000092 680A            LDR              R2, [R1]
  278 00000094 6002            STR              R2, [R0]
  279 00000096         
  280 00000096 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  281 00000098 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  282 0000009C 3020            ADDS             R0, R0, #0x20



ARM Macro Assembler    Page 8 


  283 0000009E F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  284 000000A2 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  285 000000A6 B662            CPSIE            I
  286 000000A8 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  287 000000AA         
  288 000000AA                 END
              00 00 00000000 
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\DebugI
nFlash\os_cpu_a.d -o.\DebugInFlash\os_cpu_a.o -ID:\Keil\MDK4\ARM\CMSIS\Include 
-ID:\Keil\MDK4\ARM\INC\NXP\LPC17xx --list=.\lst\os_cpu_a.lst ..\ucos\Ports\os_c
pu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 57 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_IntDis 0000002C

Symbol: CPU_IntDis
   Definitions
      At line 141 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 38 in file ..\ucos\Ports\os_cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000030

Symbol: CPU_IntEn
   Definitions
      At line 146 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 39 in file ..\ucos\Ports\os_cpu_a.asm
Comment: CPU_IntEn used once
OSCtxSw 00000054

Symbol: OSCtxSw
   Definitions
      At line 195 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 34 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000005E

Symbol: OSIntCtxSw
   Definitions
      At line 210 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 35 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000052

Symbol: OSStartHang
   Definitions
      At line 183 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 184 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 00000034

Symbol: OSStartHighRdy
   Definitions
      At line 165 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 33 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000068

Symbol: OS_CPU_PendSVHandler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 251 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 36 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 0000007C

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 264 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 254 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_ENTER_CRITICAL 00000000

Symbol: OS_ENTER_CRITICAL
   Definitions
      At line 95 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 31 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OS_ENTER_CRITICAL used once
OS_EXIT_CRITICAL 00000012

Symbol: OS_EXIT_CRITICAL
   Definitions
      At line 115 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 32 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OS_EXIT_CRITICAL used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 45 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 177 in file ..\ucos\Ports\os_cpu_a.asm
      At line 196 in file ..\ucos\Ports\os_cpu_a.asm
      At line 211 in file ..\ucos\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 48 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 178 in file ..\ucos\Ports\os_cpu_a.asm
      At line 197 in file ..\ucos\Ports\os_cpu_a.asm
      At line 212 in file ..\ucos\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 47 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 167 in file ..\ucos\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 46 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 166 in file ..\ucos\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
OS_CRITICAL_INT_PRIO 00000000

Symbol: OS_CRITICAL_INT_PRIO
   Definitions
      At line 50 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 96 in file ..\ucos\Ports\os_cpu_a.asm
      At line 124 in file ..\ucos\Ports\os_cpu_a.asm

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 25 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 21 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 270 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 22 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 271 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 20 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 173 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 23 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 259 in file ..\ucos\Ports\os_cpu_a.asm
      At line 275 in file ..\ucos\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 24 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 276 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 26 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 266 in file ..\ucos\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
OsEnterSum 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OsEnterSum
   Definitions
      At line 28 in file ..\ucos\Ports\os_cpu_a.asm
   Uses
      At line 108 in file ..\ucos\Ports\os_cpu_a.asm
      At line 117 in file ..\ucos\Ports\os_cpu_a.asm

8 symbols
356 symbols in table
